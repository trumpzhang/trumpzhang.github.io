<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on 张志宇的博客</title>
    <link>https://trumpzhang.github.io/blog/</link>
    <description>Recent content in blog on 张志宇的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 29 Oct 2019 13:49:23 +0600</lastBuildDate>
    
	<atom:link href="https://trumpzhang.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Qt5开发桌面程序</title>
      <link>https://trumpzhang.github.io/blog/qt/%E4%BD%BF%E7%94%A8qt5%E5%BC%80%E5%8F%91%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 04 Mar 2020 18:36:14 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/qt/%E4%BD%BF%E7%94%A8qt5%E5%BC%80%E5%8F%91%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/</guid>
      <description>@TOC
一.Qt的简介 Qt 是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。基本上，Qt 同 Windows 平台上的 MFC，OWL，VCL，ATL 是同类型的东西。</description>
    </item>
    
    <item>
      <title>Django框架实现在线考试系统</title>
      <link>https://trumpzhang.github.io/blog/django/django%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%9C%A8%E7%BA%BF%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 04 Mar 2020 18:34:37 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/django/django%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%9C%A8%E7%BA%BF%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F/</guid>
      <description>1.Django的简介 Django是一个基于MVC构造的框架。但是在Django中，控制器接受用户输入的部分由框架自行处理，所以 Django 里更关注的是模型（Model）、模板(Template)和视图（Views），称为 MTV模式。它们各自的职责如下： |层次| 职责 | |&amp;ndash;|&amp;ndash;| |模型（Model），即数据存取层 |模型（Model），即数据存取层 | |模板(Template)，即表现层 |处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。 | |视图（View），即业务逻辑层 |存取模型及调取恰当模板的相关逻辑。模型与模板的桥梁。 |</description>
    </item>
    
    <item>
      <title>CentOS7安装Mysql数据库</title>
      <link>https://trumpzhang.github.io/blog/centos/centos7%E5%AE%89%E8%A3%85mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Wed, 04 Mar 2020 18:33:29 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/centos/centos7%E5%AE%89%E8%A3%85mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>CentOS7安装Mysql数据库 1.安装前的准备工作 (1)关闭selinux
两种方式（建议2） #(1)临时关闭，及时生效，重启失效 [root@localhost ~]# setenforce 0 #(2)永久关闭，重启生效，永不失效 [root@localhost ~]# vi /etc/selinux/config 将SELINUX=enforcing修改为SELINUX=disabled，然后重启生效 (2)关闭防火墙</description>
    </item>
    
    <item>
      <title>SpringMvc</title>
      <link>https://trumpzhang.github.io/blog/ssm/springmvc/</link>
      <pubDate>Wed, 04 Mar 2020 18:32:06 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/ssm/springmvc/</guid>
      <description>@[TOC](三.SSM框架之Spring MVC)
三.Spring MVC 1.Spring MVC介绍 SpringMVC是Spring框架中用于Web应用开发的一个模块，是Spring提供的一个基于MVC设计模式的优秀Web开发框架，它在本质上相当于servlet。在MVC设计模式中，Spring MVC作为控制器(Controller)来建立模型与视图的数据交互，是结构最清晰的MVC Model2实现，是一个典型的MVC框架。 在Spring MVC框架中，Controller替代Servlet来担负控制器的职责，Controller接受请求，调用相应的Model进行处理，处理器完成业务处理后返回处理结果。Controller调用相应的View并对结果进行视图渲染，最终传送响应消息到客户端。 Spring MVC采用松耦合可插拔的组件结构，具有高度可配置性，比其他MVC更具扩展性和灵活性。此外，Spring MVC的注解驱动和对REST风格的支持，是他最具特色的功能。</description>
    </item>
    
    <item>
      <title>Mybatis</title>
      <link>https://trumpzhang.github.io/blog/ssm/mybatis/</link>
      <pubDate>Wed, 04 Mar 2020 18:30:45 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/ssm/mybatis/</guid>
      <description>@TOC
二.MyBatis框架 1.MyBatis及ORM简介  MyBatis是一个优秀的数据持久层框架，在实体类和SQL语句之间建立映射关系，是一种半自动化的ORM实现。其封装性要低于Hibernate，性能优越，并且小巧、简单易学，应用也越来越广泛。 它内部封装了通过JDBC访问数据库的操作，支持普通的SQL查询、存储过程和高级映射，几乎消除了所有的JDBC代码和参数的手工设置以及结果集的检索 关于ORM(Object Relational Mapping )，你应该知道的: （1）对象/关系映射是一种数据持久化技术。它在对象模型和关系型数据库之间建立起对应关系，并且提供了一种机制，通过JavaBean对象去操作数据库表中的数据。 （2）在开发中，程序员使用面向对象的技术操作数据，而当存储数据时，使用的却是关系数据库，这样造成了很多不便。ORM在对象模型和关系数据库的表之间建立了一座桥梁，有了它，程序员就不需要再使用SQL语句操作数据库中的表，使用API直接操作JavaBean对象就可以实现数据的查询、存储、更改、删除等操作。 （3）MyBatis通过简单的XML或者注解进行配置和原始映射，在实体类和SQL语句之间建立映射关系，是一种半自动化的ORM实现。 MyBatis是ORM的解决方案，下面通过简单的实例体验MyBatis  2.</description>
    </item>
    
    <item>
      <title>Spring</title>
      <link>https://trumpzhang.github.io/blog/ssm/spring/</link>
      <pubDate>Wed, 04 Mar 2020 18:29:32 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/ssm/spring/</guid>
      <description>@TOC
前言 SSM（Spring+SpringMVC+MyBatis）框架集由Spring、MyBatis两个开源框架整合而成（SpringMVC是Spring中的部分内容）。常作为数据源较简单的web项目的框架。 本博客可作为SSM的入门教程，我分为了三个部分，即Spring、Spring MVC、MyBatis，每个部分包含简单的应用实例。 最后完成一个简单的在线商城
一.Spring框架 1.认识Spring 1.1传统JavaEE开发 传统JavaEE项目在解决企业级应用问题时的“重量级”架构体系，使它的开发效率、开发难度和实际性能都令人失望。Spring以一个“救世主”形象出现在广大Java程序员面前。2002年，Rod Johnson在他的《Expert One-on-One Java EE Design and Development》一书中提出了Interface 21，也就是Spring框架的雏形。他提出技术应该以应用为主的主张，引发了人们对“正统”JavaEE的反思。2003年2月，Spring框架正式成为一个开源项目，并发布于SourceForge中。 Spring致力于JavaEE应用的各种解决方案，而不仅仅专注于某一层的方案，贯穿表现层、业务层和持久层。</description>
    </item>
    
    <item>
      <title>scala开发环境配置</title>
      <link>https://trumpzhang.github.io/blog/scala/1.scala%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 04 Mar 2020 18:28:14 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/scala/1.scala%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>1.安装Scala并配置环境变量（一般在安装时就配好了）
2.检查idea版本（插件必须与idea版本兼容）Help-&amp;gt;About，可以看到为2018.3.2
3.下载idea的开发插件（.zip文件）下载2018.3.X的插件即可
https://plugins.jetbrains.com/plugin/1347-scala
无需解压，将此文件拷贝至idea安装目录/Plugins下
4.打开idea-&amp;gt;File-&amp;gt;setting-&amp;gt;plugins-&amp;gt;install plugin from disk，重启idea
5.创建第一个Scala示例</description>
    </item>
    
    <item>
      <title>2.Hadoop3.2</title>
      <link>https://trumpzhang.github.io/blog/hadoop/2.hadoop3.2.1%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 04 Mar 2020 18:27:10 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/hadoop/2.hadoop3.2.1%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</guid>
      <description>Hadoop3.2.1 分布式集群安装 1.准备环境： 3 台 linux 虚拟机(CentOs7.x 64 位)
 ip 为： 192.</description>
    </item>
    
    <item>
      <title>1.Hadoop3.2单机伪分布集群安装</title>
      <link>https://trumpzhang.github.io/blog/hadoop/1.hadoop3.2.1%E5%8D%95%E6%9C%BA%E4%BC%AA%E5%88%86%E5%B8%83%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 04 Mar 2020 18:25:51 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/hadoop/1.hadoop3.2.1%E5%8D%95%E6%9C%BA%E4%BC%AA%E5%88%86%E5%B8%83%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</guid>
      <description>Hadoop3.2.1 单机伪分布集群安装 一.准备环境： 1台 linux 虚拟机(Centos7.x 64 位)
 ip 为：192.</description>
    </item>
    
    <item>
      <title>Feign</title>
      <link>https://trumpzhang.github.io/blog/springcloud/feign/</link>
      <pubDate>Wed, 04 Mar 2020 18:23:12 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springcloud/feign/</guid>
      <description>1.什么是Feign Feign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。Feign提供了Http请求的模板，通过编写简单的接口和插入注解，就可以定义好Http请求的参数、格式、地址等信息。而Feign则会完全代理Http请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理，这使得我们调用Http API更加优雅。 Feign整合了Ribbon和Hystrix，从而让Feign的使用更加方便。 2.Feign的特性
 可插拔的注解支持，包括Feign注解和JAX-RS注解; 支持可插拔的HTTP编码器和解码器; 支持Hystrix和它的Fallback; 支持Ribbon的负载均衡; 支持HTTP请求和响应的压缩。  这看起来有点像我们springmvc模式的Controller层的RequestMapping映射。这种模式是我们非常喜欢的。Feign是用@FeignClient来映射服务的。 Feign是以接口方式进行调用,而不是通过RestTemplate来调用,feign底层还是ribbon,并进行了封装,让我们调用起来更加方便。</description>
    </item>
    
    <item>
      <title>3.Hystrix</title>
      <link>https://trumpzhang.github.io/blog/springcloud/3.hystrix%E6%96%AD%E8%B7%AF%E5%99%A8/</link>
      <pubDate>Wed, 04 Mar 2020 18:22:12 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springcloud/3.hystrix%E6%96%AD%E8%B7%AF%E5%99%A8/</guid>
      <description>1.为什么需要断路器 1.1存在问题 在理想状态下，一个应用依赖的服务都是健康可用的，我们可以正常处理所有的请求。默认情况下tomcat只有一个线程池去处理的客户端发送的所有服务请求，这样在高并发情况下，如果客户端所有的请求堆积到同一个服务接口上，就会产生tomcat的所有线程池去处理该服务接口，可能会导致其他服务奔溃。 1.2简介 Hystrix，英文意思是豪猪，全身是刺，看起来就不好惹，是一种保护机制。 Hystrix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败。 1.3雪崩效应 在复杂的微服务架构中的应用程序有很多的依赖，都会不可避免地在某些时候失败。高并发的依赖失败时如果没有隔离措施，当前应用服务就有被拖垮的风险。一个请求，可能需要调用多个微服务接口才能实现，会形成非常复杂的调用链路： 如图，一次业务请求，需要调用A、H、I、P四个服务，这四个服务又可能调用其它服务。 如果此时某个服务出现异常： 例如微服务I发生异常，请求阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞： 服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务不可用，形成雪崩效应。 Hystrix解决雪崩问题的手段包括：</description>
    </item>
    
    <item>
      <title>2.1Eureka高可用集群搭建</title>
      <link>https://trumpzhang.github.io/blog/springcloud/eureka%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 04 Mar 2020 18:21:17 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springcloud/eureka%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid>
      <description>Eureka高可用集群搭建 1.为什么需要集群 如果只有一个注册中心服务器，会存在单点故障所以要集群部署。这样即使集群中某个节点出现宕机等故障，系统仍可以从其他节点拉取微服务地址，从而正常运行。 2.集群搭建 生产环境把Eureka部署多个服务器就ok了,开发阶段可以使用同一台主机不同端口号来模拟集群：
2.1 准备2个EurekaServer工程，需要相互注册 server1: 9000 server2: 9001</description>
    </item>
    
    <item>
      <title>2.服务注册与发现</title>
      <link>https://trumpzhang.github.io/blog/springcloud/2.%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0eureka%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 04 Mar 2020 18:19:24 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springcloud/2.%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0eureka%E5%9F%BA%E7%A1%80/</guid>
      <description>2.1 微服务的注册中心
注册中心相当于微服务架构中的“通讯录”，它记录了服务和服务地址的映射关系，在分布式架构中，服务会注册到这里，当服务需要调用其他服务时，就在这里找到服务的地址进行调用。
2.1.1 注册中心的主要作用
服务注册中心是微服务架构中非常重要的一个组件，在微服务架构里主要起到了协调者的一个作用，注册中心一般包含如下几个功能：
（1）服务发现
 服务注册/反注册：保存服务提供者和服务调用者的信息 服务订阅/取消订阅：服务调用者订阅服务提供者的信息，最好有实时推送的功能 服务路由（可选）：具有筛选整合服务提供者的能力。  （2）服务配置</description>
    </item>
    
    <item>
      <title>网站架构演变过程简述</title>
      <link>https://trumpzhang.github.io/blog/springcloud/1.%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B%E7%AE%80%E8%BF%B0/</link>
      <pubDate>Wed, 04 Mar 2020 18:17:57 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springcloud/1.%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B%E7%AE%80%E8%BF%B0/</guid>
      <description>一、网站架构演变过程 网站架构大致可以分为以下几个阶段： 传统架构（单体应用）-&amp;gt;分布式架构（以项目进行拆分）-&amp;gt;SOA（面向服务架构）-&amp;gt;微服务架构
1.Monolith（单体应用）架构 1.1	什么是单体应用 首先请回想一下我们所开发的服务是什么样子的。通常情况下，这个服务所对应的代码由多个项目所组成，各个项目会根据自身所提供功能的不同具有一个明确的边界。在编译时，这些项目将被打包成为一个个JAR包，并最终合并在一起形成一个WAR包。接下来，我们需要将该WAR包上传到Web容器中，解压该WAR包，并重新启动服务器。在执行完这一系列操作之后，我们对服务的编译及部署就已经完成了。这种将所有的代码及功能都包含在一个WAR包中的项目组织方式被称为Monolith。例如我们使用的SSH、SSM架构都是单体架构。 1.2	缺点 这种架构将整个业务模块在一个项目中进行开发，按照MVC思想分层。 在项目很小的情况下这种单体应用比较简单，但是随着项目越变越大，代码越来越多，就会存在以下缺点：</description>
    </item>
    
    <item>
      <title>SpringBoot集成tk Mybatis简单方法</title>
      <link>https://trumpzhang.github.io/blog/springboot/springboot%E9%9B%86%E6%88%90tk-mybatis%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 04 Mar 2020 18:16:09 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springboot/springboot%E9%9B%86%E6%88%90tk-mybatis%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</guid>
      <description>前言： 使用SpringBoot很方便，但经常因为一个业务而写很多SQL语句（很多都是CRUD），而怎样才能不写SQL语句或很少写呢？ 最近发现了一款好玩的mybatis插件（通用Mapper）tk-mybatis，它解决了上面的这些问题。 介绍： tk-mybatis由国人编写，码云地址
 https://gitee.com/free
 作者还写了使用文档，地址
 https://gitee.</description>
    </item>
    
    <item>
      <title>SpringBoot快速入门</title>
      <link>https://trumpzhang.github.io/blog/springboot/springboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 04 Mar 2020 18:14:56 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springboot/springboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>SpringBoot学习笔记 1.简介 Spring Boot来简化Spring应用开发，约定大于配置， 去繁从简，just run就能创建一个独立的，产品级别的应用 背景： J2EE笨重的开发、繁多的配置、低下的开发效率、 复杂的部署流程、第三方技术集成难度大。 解决： “Spring全家桶”时代。 Spring Boot -&amp;gt;J2EE一站式解决方案 Spring Cloud -&amp;gt;分布式整体解决方案 优点：</description>
    </item>
    
    <item>
      <title>SpringBoot常用注解</title>
      <link>https://trumpzhang.github.io/blog/springboot/springboot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Wed, 04 Mar 2020 18:12:57 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springboot/springboot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</guid>
      <description>springboot常用注解 @SpringBootApplication
包含@Configuration、@EnableAutoConfiguration、@ComponentScan
通常用在主类上。
@Repository
用于标注数据访问组件，即DAO组件。
@Service
用于标注业务层组件。
@RestController
用于标注控制层组件，相当于@Controller+@ResponseBody</description>
    </item>
    
    <item>
      <title>YAML与SpringBoot多环境配置</title>
      <link>https://trumpzhang.github.io/blog/springboot/yaml%E4%B8%8Espringboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 04 Mar 2020 18:11:26 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springboot/yaml%E4%B8%8Espringboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>1.YAML Springboot除了支持properties的配置，还支持yaml，而且企业中也是用的最多的。 1.1.	YAML 是什么 YAML（/ˈjæməl/，尾音类似camel骆驼）是一个可读性高，用来表达数据序列化的格式。YAML参考了其他多种语言，包括：C语言、Python、Perl，并从XML、电子邮件的数据格式（RFC 2822）中获得灵感。Clark Evans在2001年首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者。当前已经有数种编程语言或脚本语言支持（或者说解析）这种语言。 YAML是&amp;quot;YAML Ain&amp;rsquo;t a Markup Language&amp;rdquo;（YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&amp;ldquo;Yet Another Markup Language&amp;rdquo;（仍是一种标记语言），但为了强调这种语言以数据做为中心，而不是以标记语言为重点，而用反向缩略语重命名。 1.</description>
    </item>
    
    <item>
      <title>RestfulAPI</title>
      <link>https://trumpzhang.github.io/blog/springboot/restfulapi/</link>
      <pubDate>Wed, 04 Mar 2020 18:09:27 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springboot/restfulapi/</guid>
      <description>RESTFUL是一种网络应用程序的设计风格和开发方式，基于HTTP，可以使用XML格式定义或JSON格式定义。RESTFUL适用于移动互联网厂商作为业务使能接口的场景，实现第三方OTT调用移动网络资源的功能，动作类型为新增、变更、删除所调用资源。 REST（英文：Representational State Transfer，简称REST）描述了一个架构样式的网络系统，比如 web 应用程序。 在目前主流的三种Web服务交互方案中，REST相比于SOAP（Simple Object Access protocol，简单对象访问协议）以及XML-RPC更加简单明了，无论是对URL的处理还是对Payload的编码，REST都倾向于用更加简单轻量的方法设计和实现。值得注意的是REST并没有一个明确的标准，而更像是一种设计的风格。</description>
    </item>
    
    <item>
      <title>SpringBoot整合Mybatis</title>
      <link>https://trumpzhang.github.io/blog/springboot/springboot%E6%95%B4%E5%90%88mybatis/</link>
      <pubDate>Wed, 04 Mar 2020 18:04:21 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/springboot/springboot%E6%95%B4%E5%90%88mybatis/</guid>
      <description>1.SpringBoot整合Mybatis  File| New|Project |Spring Initializr|  选择需要的组件：  配置Maven:  修改配置文件  application.</description>
    </item>
    
    <item>
      <title>Vue组件封装及父、子组件通信</title>
      <link>https://trumpzhang.github.io/blog/vue/vue%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85%E5%8F%8A%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Wed, 04 Mar 2020 15:52:48 +0800</pubDate>
      
      <guid>https://trumpzhang.github.io/blog/vue/vue%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85%E5%8F%8A%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</guid>
      <description>1.封装子组件时  首先对子组件需要的的数据进行整理 子组件名称使用 - 区别，使用div等标签包裹子组件模板内容 子组件的style文件加上scoped作用域 子组件添加props、data、methods等属性，数据由父组件传入子组件 子组件具体的事件处理逻辑应在父组件实现，因此在子组件使用this.$emit(&#39;inChange&#39;,index) 表示父组件监听 inChange事件，将index传至父组件，让父组件实现具体的事件处理逻辑  2.</description>
    </item>
    
  </channel>
</rss>